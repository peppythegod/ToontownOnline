from direct.distributed import DistributedObject/AI/UD
from direct.distributed import DistributedNode/AI/UD
from direct.distributed import DistributedSmoothNode/AI
from direct.distributed import DistributedCartesianGrid/AI
from direct.distributed import DistributedCamera/AI/OV

from otp.distributed import DistributedDirectory/AI
from otp.distributed import DistributedDistrict/AI/UD
from otp.ai import TimeManager/AI
from otp.distributed import Account/AI/UD
from otp.distributed import CentralLogger/AI/UD
from otp.avatar import DistributedPlayer/AI
from otp.avatar import DistributedAvatar/AI/UD
from otp.uberdog import DistributedChatManager/AI/UD

from toontown.distributed import ToontownDistrict/AI
from toontown.distributed import DistributedTimer/AI
from toontown.toon import DistributedToon/AI/UD
from toontown.toon import DistributedNPCToonBase/AI
from toontown.toon import DistributedNPCToon/AI
from toontown.toon import DistributedNPCSpecialQuestGiver/AI
from toontown.toon import DistributedNPCFlippyInToonHall/AI
from toontown.toon import DistributedNPCScientist/AI
from toontown.toon import DistributedNPCClerk/AI
from toontown.toon import DistributedNPCTailor/AI
from toontown.toon import DistributedNPCBlocker/AI
from toontown.toon import DistributedNPCFisherman/AI
from toontown.toon import DistributedNPCPartyPerson/AI
from toontown.toon import DistributedNPCPetclerk/AI
from toontown.toon import DistributedNPCKartClerk/AI
from toontown.classicchars import DistributedCCharBase/AI
from toontown.classicchars import DistributedMickey/AI
from toontown.classicchars import DistributedVampireMickey/AI
from toontown.classicchars import DistributedMinnie/AI
from toontown.classicchars import DistributedWitchMinnie/AI
from toontown.classicchars import DistributedGoofy/AI
from toontown.classicchars import DistributedSuperGoofy/AI
from toontown.classicchars import DistributedDaisy/AI
from toontown.classicchars import DistributedSockHopDaisy/AI
from toontown.classicchars import DistributedChip/AI
from toontown.classicchars import DistributedPoliceChip/AI
from toontown.classicchars import DistributedDale/AI
from toontown.classicchars import DistributedJailbirdDale/AI
from toontown.classicchars import DistributedGoofySpeedway/AI
from toontown.classicchars import DistributedDonald/AI
from toontown.classicchars import DistributedFrankenDonald/AI
from toontown.classicchars import DistributedDonaldDock/AI
from toontown.classicchars import DistributedPluto/AI
from toontown.classicchars import DistributedWesternPluto/AI
from toontown.tutorial import TutorialManager/AI
from toontown.building import DistributedDoor/AI
from toontown.building import DistributedTutorialInterior/AI
from toontown.building import DistributedTrophyMgr/AI
from toontown.building import DistributedBuilding/AI
from toontown.building import DistributedAnimBuilding/AI
from toontown.building import DistributedToonInterior/AI
from toontown.building import DistributedToonHallInterior/AI
from toontown.building import DistributedSuitInterior/AI
from toontown.building import DistributedHQInterior/AI
from toontown.building import DistributedGagshopInterior/AI
from toontown.building import DistributedPetshopInterior/AI
from toontown.building import DistributedKartShopInterior/AI
from toontown.building import DistributedAnimDoor/AI
from toontown.building import DistributedKnockKnockDoor/AI
from toontown.building import DistributedElevator/AI
from toontown.building import DistributedElevatorFSM/AI
from toontown.building import DistributedElevatorExt/AI
from toontown.building import DistributedElevatorInt/AI
from toontown.building import DistributedBoardingParty/AI
from toontown.building import DistributedElevatorFloor/AI
from toontown.building import DistributedBossElevator/AI
from toontown.building import DistributedVPElevator/AI
from toontown.building import DistributedCFOElevator/AI
from toontown.building import DistributedCJElevator/AI
from toontown.building import DistributedBBElevator/AI
from toontown.building import DistributedAnimatedProp/AI
from toontown.estate import DistributedHouseDoor/AI
from toontown.coghq import DistributedCogHQDoor/AI
from toontown.coghq import DistributedSellbotHQDoor/AI
from toontown.safezone import SafeZoneManager/AI
from toontown.safezone import DistributedTrolley/AI
from toontown.safezone import DistributedButterfly/AI
from toontown.safezone import DistributedBoat/AI
from toontown.safezone import DistributedMMPiano/AI
from toontown.safezone import DistributedDGFlower/AI
from toontown.minigame import DistributedMinigame/AI
from toontown.minigame import DistributedMinigameTemplate/AI
from toontown.minigame import DistributedRaceGame/AI
from toontown.minigame import DistributedCannonGame/AI
from toontown.minigame import DistributedPhotoGame/AI
from toontown.minigame import DistributedPatternGame/AI
from toontown.minigame import DistributedRingGame/AI
from toontown.minigame import DistributedTagGame/AI
from toontown.minigame import DistributedMazeGame/AI
from toontown.minigame import DistributedTugOfWarGame/AI
from toontown.minigame import DistributedCatchGame/AI
from toontown.minigame import DistributedDivingGame/AI
from toontown.minigame import DistributedTargetGame/AI
from toontown.minigame import DistributedPairingGame/AI
from toontown.minigame import DistributedVineGame/AI
from toontown.minigame import DistributedIceGame/AI
from toontown.minigame import DistributedCogThiefGame/AI
from toontown.minigame import DistributedTwoDGame/AI
from toontown.safezone import DistributedTreasure/AI
from toontown.safezone import DistributedDDTreasure/AI
from toontown.safezone import DistributedDGTreasure/AI
from toontown.safezone import DistributedDLTreasure/AI
from toontown.safezone import DistributedTTTreasure/AI
from toontown.safezone import DistributedBRTreasure/AI
from toontown.safezone import DistributedMMTreasure/AI
from toontown.safezone import DistributedOZTreasure/AI
from toontown.safezone import DistributedETreasure/AI
from toontown.safezone import DistributedEFlyingTreasure/AI
from toontown.minigame import DistributedTagTreasure/AI
from toontown.shtiker import PurchaseManager/AI
from toontown.shtiker import NewbiePurchaseManager/AI
from toontown.suit import DistributedSuitBase/AI
from toontown.suit import DistributedSuit/AI
from toontown.suit import DistributedTutorialSuit/AI
from toontown.suit import DistributedFactorySuit/AI
from toontown.battle import DistributedBattleBase/AI
from toontown.battle import DistributedBattle/AI
from toontown.battle import DistributedBattleBldg/AI
from toontown.battle import DistributedBattleFinal/AI
from otp.level import DistributedLevel/AI
from otp.level import DistributedEntity/AI
from otp.level import DistributedInteractiveEntity/AI
from toontown.coghq import DistributedLift/AI
from toontown.coghq import DistributedDoorEntity/AI
from toontown.coghq import DistributedSwitch/AI
from toontown.coghq import DistributedButton/AI
from toontown.coghq import DistributedTrigger/AI
from toontown.coghq import DistributedCrushableEntity/AI
from toontown.coghq import DistributedCrusherEntity/AI
from toontown.coghq import DistributedElevatorMarker/AI
from toontown.coghq import DistributedBarrelBase/AI
from toontown.coghq import DistributedGagBarrel/AI
from toontown.coghq import DistributedBeanBarrel/AI
from toontown.coghq import DistributedHealBarrel/AI
from toontown.coghq import DistributedStomper/AI
from toontown.coghq import DistributedStomperPair/AI
from toontown.coghq import DistributedGrid/AI
from toontown.coghq import ActiveCell/AI
from toontown.coghq import DirectionalCell/AI
from toontown.coghq import CrusherCell/AI
from toontown.coghq import DistributedCrate/AI
from toontown.coghq import DistributedSinkingPlatform/AI
from toontown.suit import DistributedGoon/AI
from toontown.suit import DistributedGridGoon/AI
from toontown.coghq import BattleBlocker/AI
from toontown.coghq import DistributedFactoryElevatorExt/AI
from toontown.coghq import DistributedMintElevatorExt/AI
from toontown.coghq import DistributedLawOfficeElevatorExt/AI
from toontown.coghq import DistributedLawOfficeElevatorInt/AI
from toontown.coghq import LobbyManager/AI
from toontown.coghq import DistributedFactory/AI
from toontown.coghq import DistributedBattleFactory/AI
from toontown.coghq import DistributedMintBattle/AI
from toontown.coghq import DistributedStageBattle/AI
from toontown.suit import DistributedMintSuit/AI
from toontown.suit import DistributedStageSuit/AI
from toontown.suit import DistributedSellbotBoss/AI
from toontown.suit import DistributedCashbotBoss/AI
from toontown.coghq import DistributedCashbotBossSafe/AI
from toontown.coghq import DistributedCashbotBossCrane/AI
from toontown.suit import DistributedCashbotBossGoon/AI
from toontown.coghq import DistributedMint/AI
from toontown.coghq import DistributedMintRoom/AI
from toontown.coghq import DistributedStage/AI
from toontown.coghq import DistributedStageRoom/AI
from toontown.coghq import DistributedCashbotBossTreasure/AI
from toontown.coghq import DistributedLawOffice/AI
from toontown.coghq import DistributedLawOfficeFloor/AI
from toontown.suit import DistributedLawbotBoss/AI
from toontown.coghq import DistributedLawbotBossGavel/AI
from toontown.suit import DistributedLawbotBossSuit/AI
from toontown.coghq import DistributedLawbotCannon/AI
from toontown.coghq import DistributedLawbotChair/AI
from toontown.coghq import DistributedLaserField/AI
from toontown.coghq import DistributedGolfGreenGame/AI
from toontown.coghq import DistributedSecurityCamera/AI
from toontown.coghq import DistributedMover/AI
from toontown.suit import DistributedBossbotBoss/AI
from toontown.coghq import DistributedCogKart/AI
from toontown.coghq import DistributedCountryClub/AI
from toontown.coghq import DistributedCountryClubRoom/AI
from toontown.coghq import DistributedMoleField/AI
from toontown.coghq import DistributedCountryClubBattle/AI
from toontown.building import DistributedClubElevator/AI
from toontown.coghq import DistributedMaze/AI
from toontown.battle import DistributedBattleWaiters/AI
from toontown.coghq import DistributedFoodBelt/AI
from toontown.coghq import DistributedBanquetTable/AI
from toontown.battle import DistributedBattleDiners/AI
from toontown.coghq import DistributedGolfSpot/AI
from toontown.ai import NewMagicWordManager/AI
from toontown.suit import DistributedSuitPlanner/AI


keyword required;
keyword broadcast;
keyword ram;
keyword db;
keyword p2p;
keyword clsend;
keyword ownsend;
keyword airecv;

struct BarrierData {
  uint16 context;
  string name;
  uint32 avIds[];
};

// The most fundamental class
dclass DistributedObject {
  setBarrierData(BarrierData []) broadcast ram;
  setBarrierReady(uint16) airecv clsend;
  execCommand(string, uint32, uint32, uint32);
  broadcastMessage() broadcast;
};

dclass CentralLogger : DistributedObject {
  sendMessage(string(0-256), string(0-1024), uint32, uint32) clsend;
  logAIGarbage() airecv;
};

struct OSInfo {
  string name;
  int16 platform;
  int16 major;
  int16 minor;
};

struct CPUSpeed {
  int32/1000 maxSpeed;
  int32/1000 currentSpeed;
};

// The TimeManager should be created before all other objects, because
// network timestamps can't be accurately decoded until the
// TimeManager has been created.
dclass TimeManager : DistributedObject {
  requestServerTime(uint8 context) airecv clsend;
  serverTime(uint8 context, int16 timestamp, uint32 timeOfDay);
  setDisconnectReason(uint8 disconnectCode) airecv clsend;
  setSignature(string(0-1024) signature, char prcHash[16], char pycHash[16]) airecv clsend;
  setCpuInfo(string(0-1024) infoStr, string cacheStatus) airecv clsend;
  setExceptionInfo(string(0-1024)) airecv clsend;
  setFrameRate(uint16/10, uint16/1000, uint16, string(0-256), uint32/10, uint32/10, string(0-256), uint16, uint16, uint32/10, uint32/10, uint32/10, uint32, OSInfo, CPUSpeed, uint16, uint16, string(0-256)) airecv clsend;
  checkForGarbageLeaks(uint8) airecv clsend;
  setNumAIGarbageLeaks(uint32);
  setClientGarbageLeak(uint32, string(0-1024)) airecv clsend;
  checkAvOnDistrict(uint32, uint32) clsend airecv;
  checkAvOnDistrictResult(uint32, uint32, uint8);
};

dclass DistributedDistrict : DistributedObject {
  setName(string) required broadcast ram;
  setAvailable(uint8) required broadcast ram;
};

dclass ToontownDistrict : DistributedDistrict {
  setParentingRules(string, string) broadcast ram;
  allowAHNNLog(uint8) broadcast required ram;
};

dclass DistributedNode : DistributedObject {
  setParentStr(blob) broadcast ram ownsend airecv;
  setParent(uint32) broadcast ram ownsend airecv;
  setX(int16/10) broadcast ram ownsend airecv;
  setY(int16/10) broadcast ram ownsend airecv;
  setZ(int16/10) broadcast ram ownsend airecv;
  setH(int16%360/10) broadcast ram ownsend airecv;
  setP(int16%360/10) broadcast ram ownsend airecv;
  setR(int16%360/10) broadcast ram ownsend airecv;
  setPos : setX, setY, setZ;
  setHpr : setH, setP, setR;
  setPosHpr : setX, setY, setZ, setH, setP, setR;
  setXY : setX, setY;
  setXZ : setX, setZ;
  setXYH : setX, setY, setH;
  setXYZH : setX, setY, setZ, setH;
};

dclass DistributedSmoothNode : DistributedNode {
  setComponentL(uint64) broadcast ram ownsend airecv;
  setComponentX(int16/10) broadcast ram ownsend airecv;
  setComponentY(int16/10) broadcast ram ownsend airecv;
  setComponentZ(int16/10) broadcast ram ownsend airecv;
  setComponentH(int16%360/10) broadcast ram ownsend airecv;
  setComponentP(int16%360/10) broadcast ram ownsend airecv;
  setComponentR(int16%360/10) broadcast ram ownsend airecv;
  setComponentT(int16) broadcast ram ownsend airecv;
  setSmStop : setComponentT;
  setSmH : setComponentH, setComponentT;
  setSmZ : setComponentZ, setComponentT;
  setSmXY : setComponentX, setComponentY, setComponentT;
  setSmXZ : setComponentX, setComponentZ, setComponentT;
  setSmPos : setComponentX, setComponentY, setComponentZ, setComponentT;
  setSmHpr : setComponentH, setComponentP, setComponentR, setComponentT;
  setSmXYH : setComponentX, setComponentY, setComponentH, setComponentT;
  setSmXYZH : setComponentX, setComponentY, setComponentZ, setComponentH, setComponentT;
  setSmPosHpr : setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;
  setSmPosHprL : setComponentL, setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;
  clearSmoothing(int8) broadcast ownsend;
  suggestResync(uint32, uint32, uint32, uint32, uint32, uint32) ownrecv clsend;
  returnResync(uint32, uint32, uint32, uint32, uint32) ownrecv clsend;
};

struct TalkModification {
  uint16 offset;
  uint16 size;
};

dclass TalkPath_owner {
  setTalk(uint32, uint32, string(0-256), string(0-400), TalkModification [], uint8) broadcast ownsend;
};

dclass TalkPath_whisper {
  setTalkWhisper(uint32, uint32, string(0-256), string(0-400), TalkModification [], uint8) ownrecv clsend;
};

dclass TalkPath_group {
  setTalkGroup(uint32, uint32, string(0-256), string(0-400), TalkModification [], uint8) clsend airecv;
};

dclass TalkPath_account {
  setTalkAccount(uint32, uint32, string(0-256), string(0-400), TalkModification [], uint8) airecv clsend;
};

dclass AvatarHandle : TalkPath_whisper {
};

dclass DistributedAvatar : DistributedSmoothNode, TalkPath_owner, TalkPath_whisper {
};

dclass DistributedPlayer : DistributedAvatar {
  arrivedOnDistrict(uint32) ownrecv ram;
  setSC(uint16) broadcast ownsend airecv;
  setSCCustom(uint16) broadcast ownsend airecv;
  setAccess(uint8 = 2) broadcast required ram db;
};

typedef int16 pair16[2];

dclass DistributedToon : DistributedPlayer {
  setName(string) required broadcast ram db;
  setDNAString(blob) required broadcast ram db;
  setMaxBankMoney(int16 = 1000) required broadcast ram db;
  setBankMoney(int16 = 0) required broadcast ram db;
  setMaxMoney(int16 = 40) required broadcast ram db;
  setMoney(int16 = 0) required broadcast ram db;
  setMaxHp(int16 = 15) required broadcast db;
  setHp(int16 = 15) required broadcast db;
  setExperience(blob = { 0 * 14 }) required p2p db;
  setMaxCarry(uint8 = 20) required p2p db;
  // all I need is a single bit for each track, but uint8array is the
  // smallest and it crashes
  setTrackAccess(uint16array = {0,0,0,0,1,1,0}) required broadcast db;
  // Progress training a track. -1 trackId means no track, progress is a bit array
  setTrackProgress(int8 trackId = -1, uint32 progress = 0) required p2p db;
  // Track bonus level
  setTrackBonusLevel(int8 trackArray[] = [-1,-1,-1,-1,-1,-1,-1]) required broadcast ownrecv db;
  // a 42 byte string of uint8s. We give some props for starters.
  setInventory(blob = { 0 * 7,       // Heal
                        0 * 7,       // Trap
                        0 * 7,       // Lure
                        0 * 7,       // Sound
                        1, 0 * 6,    // Throw
                        1, 0 * 6,    // Squirt
                        0 * 7        // Drop
                        }) required p2p db;

  setFriendsList(uint32uint8array = {}) required p2p db;

  setDefaultShard(uint32 = 200000000) required p2p db;
  setDefaultZone(uint16 = 2000) required p2p db;
  setShtickerBook(blob = {}) required p2p db;
  setZonesVisited(uint16array = { 2000 }) required p2p db;
  setHoodsVisited(uint16array = { 2000 }) required p2p db;
  setInterface(blob = {}) required p2p db;
  setAccountName(string = "unknown") required p2p db;
  setLastHood(uint16 = 2000) required p2p db;
  setTutorialAck(uint8 = 0) required p2p db;

  setMaxClothes(uint32 = 10) required p2p db;
  setClothesTopsList(uint8array clothesTopsList = {}) required p2p db;
  setClothesBottomsList(uint8array clothesBottomsList = {}) required p2p db;

  // The AI uses this to tell the toon how much earned experience he
  // has accumulated so far within a particular battle.  This is
  // important to allow the client to gray out gag buttons when the
  // toon exceeds his experience cap for the battle.
  setEarnedExperience(uint16array earnedExp) p2p;

  // toon final X position wrt tunnel, tunnel pos/heading
  setTunnelIn(int16 timestamp,
              int16/10 endX,
              int16/10 x, int16/10 y, int16/100 z,
              int32/100 h) ownsend broadcast;
  // toon starting position wrt tunnel, tunnel pos/heading
  setTunnelOut(int16 timestamp,
               int16/10 startX, int16/10 startY,
               int16/10 x, int16/10 y, int16/100 z,
               int32/100 h) ownsend broadcast;

  setAnimState(blob, int16 / 1000, int16 timestamp) broadcast ram ownsend;

  setChat(string chat, uint8 chatFlags) broadcast ownsend;

  setEmoteState(int16, int16 / 1000, int16 timestamp) broadcast ram ownsend;
  setEmoteAccess(uint8array bits = {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}) required p2p db;

  // placehoder int16 parameter to avoid server crash
  playSplashEffect(int16/10 x, int16/10 y, int16/10 z) broadcast ownsend;

  // These whisper messages are sent from another client.  For now, we
  // have to put the fromId in the message, but eventually we need to
  // have a way to validate these.
  setWhisperFrom(uint32 fromId, string) p2p clsend;
  setWhisperQTFrom(uint32 fromId, uint8array) p2p clsend;
  setWhisperQTQuestFrom(uint32 fromId, uint32array) p2p clsend;
  setWhisperQTCustomFrom(uint32 fromId, uint16 messageIndex) airecv clsend;
  setWhisperIgnored(uint32 fromId) p2p clsend;

  // This is an onscreen message sent by the system.
  setSystemMessage(uint32 aboutId, string) p2p;

  setQT(uint8array) broadcast ownsend;
  setQTQuest(uint32array) broadcast ownsend;
  setQTCustom(uint16 messageIndex) broadcast ownsend;
  setCommonChatFlags(uint8) broadcast p2p ram;

  // The trophy score is not a permanent property of the toon, so it
  // does not get saved in the database.  It is instead set by the AI,
  // and it varies from shard to shard.
  setTrophyScore(uint16 score) broadcast p2p ram;

  // This message is sent by the AI to notify the client when friends
  // are added or removed without the client's participation, if the
  // client happens to be logged in.  It also might be sent directly
  // from the friend (or former friend).
  // TODO: this is still clsend but should not be to be secure
  friendsNotify(int32 avId, int8 status) p2p clsend;

  // List of safe zones you can teleport to
  setTeleportAccess(uint32array = {}) required p2p db;
  checkTeleportAccess(uint16) airecv ownsend;

  // TODO: check these clsends closely for security later
  battleSOS(uint32 requesterID) p2p clsend;
  teleportQuery(uint32 requesterId) p2p clsend;
  teleportResponse(uint32 avId, int8 available, uint32 shardId,
                   uint16 hoodId, uint16 zoneId) p2p clsend;
  teleportGiveup(uint32 avId) p2p clsend;
  teleportGreeting(uint32 avId) broadcast ownsend;

  setCogStatus(uint32array = {1 * 32}) required p2p db;
  setCogCount(uint32array = {0 * 32}) required p2p db;

  setCogRadar(uint8array = {0 * 4}) required p2p db;
  setBuildingRadar(uint8array = {0 * 4}) required p2p db;

  setFishes(uint32array = {}) required p2p db;
  setHouseId(uint32 id = 0) required p2p db;
  setQuests(uint32array = {}) required broadcast db;
  setQuestHistory(uint16array = {}) required p2p db;
  setRewardHistory(uint8 tier = 0, uint16array = {}) required p2p db;
  setQuestCarryLimit(uint8 = 1) required p2p db;

  setCheesyEffect(int16 effect = 0, uint16 hoodId = 0, uint32 expireTime = 0) required broadcast db;
  setPosIndex(uint8 index = 0) required p2p db;
  suggestResync(uint32 avId) p2p clsend;
  
  setGolfHistory(uint16 history[18] = [0*18]) required ownrecv db;
  setGardenStarted(uint8 bStarted = 0) required ownrecv db;
  requestPing(uint32) airecv ownsend;
  ping(char [0-1024]);
  pingresp(char [0-1024]) airecv ownsend;
  setCatalogSchedule(uint16 = 0, uint32 = 0) required ownrecv db;
  setCatalog(blob = [], blob = [], blob = []) required ownrecv db;
  setMailboxContents(blob = []) required ownrecv db;
  setDeliverySchedule(blob = []) required ownrecv db airecv;
  setGiftSchedule(blob = []) required ownrecv db airecv;
  setAwardMailboxContents(blob = []) required ownrecv db;
  setAwardSchedule(blob = []) required ownrecv db airecv;
  setAwardNotify(uint8 = 0) required ownrecv db;
  setCatalogNotify(uint8 = 0, uint8 = 0) required ownrecv db;
  toonUp(uint16) broadcast ownrecv;
  takeDamage(uint16) broadcast ownrecv;
  setSpeedChatStyleIndex(uint8 = 1) required ownsend broadcast db;
  setFishCollection(uint8[] = [], uint8[] = [], uint16[] = []) required ownrecv db;
  setMaxFishTank(uint8 = 20) required ownrecv db;
  setFishTank(uint8[] = [], uint8[] = [], uint16[] = []) required ownrecv db;
  setFishingRod(uint8 = 0) required broadcast ownrecv db;
  setFishingTrophies(uint8[] = []) required ownrecv db;
  setFlowerCollection(uint8[] = [], uint8[] = []) required ownrecv db;
  setFlowerBasket(uint8[] = [], uint8[] = []) required ownrecv db;
  setMaxFlowerBasket(uint8 = 20) required ownrecv db;
  setGardenTrophies(uint8[] = []) required ownrecv db;
  setShovel(uint8 = 0) required broadcast ownrecv db;
  setShovelSkill(uint32 = 0) required ownrecv db;
  setWateringCan(uint8 = 0) required broadcast ownrecv db;
  setWateringCanSkill(uint32 = 0) required ownrecv db;
  setBattleId(uint32 = 0) broadcast ownrecv;
  
  setCogLevels(uint8[] = [0 * 4]) required broadcast ownrecv db;
  setCogTypes(uint8[] = [0 * 4]) required broadcast ownrecv db;
  setCogParts(uint32[] = [0 * 4]) required broadcast ownrecv db;
  setCogMerits(uint16[] = [0 * 4]) required ownrecv db;
  setPromotionStatus(uint8[] = [0 * 4]) required broadcast ownrecv db;
  requestPromotion(uint8) ownsend airecv;
  setCogIndex(int8) broadcast ram;
  setDisguisePageFlag(int8) ownrecv;
  setSosPageFlag(int8) ownrecv;
  setCogSummonsEarned(uint8[] = [0*32]) required ownrecv db;
  reqCogSummons(char [0-256], uint32) ownsend airecv;
  cogSummonsResponse(string, uint32, uint32) ownrecv;
  reqUseSpecial(int32) ownsend airecv;
  useSpecialResponse(string) ownrecv;
  presentPie(int16/10, int16/10, int16/10, int16/10, int16/10, int16/10, int32) broadcast ownsend;
  tossPie(int16/10, int16/10, int16/10, int16/10, int16/10, int16/10, uint8, uint8, int32) broadcast ownsend;
  pieSplat(int16/10, int16/10, int16/10, uint8, uint8, int32) broadcast ownsend;
  setPieType(uint8) broadcast ownrecv ram;
  setNumPies(uint16) broadcast ownrecv ram;
  setResistanceMessages(pair16 [] = []) required ownrecv db;
  reqSCResistance(uint16, uint32 []) ownsend airecv;
  setSCResistance(uint16, uint32 []) broadcast ownrecv;

  // these fields are for the Servers .. client should never see these ??
  // the index
  OwningAccount(uint32 avId = 0);
  // the string the person want to be there av's name
  WishName(string = "");
  // CLOSED,OPEN,USED,.. The state of the name review process
  WishNameState(string = "");
};

dclass Account {
// RHH
// This is for internal server usa only...

  // the 6 avatars a person has
  ACCOUNT_AV_SET( uint32array );
  // some old records have this no longer tracked
  BIRTH_DATE( string );
  // this is the swid... or external name..
  BLAST_NAME( string="" );
  // date of creation in local machine time
  CREATED(string="" );
  // the name for the account  ( no longer tracked )
  FIRST_NAME(string="" );
  // the last time this person account connected to game
  LAST_LOGIN(string="" );
  // No Longer Tracked
  LAST_NAME( string="" );
  // total time this account has been loged in ..
  PLAYED_MINUTES( string="" );
  // total time this account has been loged in this period
  PLAYED_MINUTES_PERIOD( string="" );
  //PASSWD( string );
  // the 6 houses a person has
  HOUSE_ID_SET( uint32array );
  ESTATE_ID( uint32 );
};

dclass TutorialManager : DistributedObject {
 requestTutorial() airecv clsend;
 rejectTutorial() airecv clsend;
 requestSkipTutorial() airecv clsend;
 skipTutorialResponse(uint8);
 enterTutorial(uint32, uint32, uint32, uint32);
 allDone() airecv clsend;
 toonArrived() airecv clsend;
};

dclass DistributedDoor : DistributedObject {
  setZoneIdAndBlock(uint32, uint32) required broadcast ram;
  setSwing(int8) required broadcast ram;
  setDoorType(uint8) required broadcast ram;
  setDoorIndex(uint8) required broadcast ram;
  setOtherZoneIdAndDoId(uint32, uint32);
  requestEnter() airecv clsend;
  requestExit() airecv clsend;
  rejectEnter(int8);
  avatarEnter(uint32) broadcast;
  avatarExit(uint32) broadcast;
  setState(string, int16) required broadcast ram;
  setExitDoorState(string, int16) required broadcast ram;
};

dclass DistributedTutorialInterior : DistributedObject {
 setZoneIdAndBlock(uint32, uint16) required broadcast ram;
 setTutorialNpcId(uint32) required broadcast ram;
};

dclass DistributedNPCToonBase : DistributedNode {
 setName(string) required broadcast ram;
 setDNAString(blob) required broadcast ram;
 setPositionIndex(uint8) required broadcast ram;
 setAnimState(string, int16/1000, int16) broadcast ram;
 setPageNumber(int16, int8, int16) broadcast ram clsend;
 avatarEnter() airecv clsend;
 freeAvatar();
};

dclass DistributedNPCToon : DistributedNPCToonBase {
 setMovie(uint8, uint32, uint32, uint16array, int16) broadcast ram;
 setMovieDone() airecv clsend;
 chooseQuest(uint16) airecv clsend;
 chooseTrack(int8) airecv clsend;
};

dclass DistributedNPCSpecialQuestGiver : DistributedNPCToonBase {
  setMovie(uint8, uint32, uint32, uint16array, int16) broadcast ram;
  setMovieDone() airecv clsend;
  chooseQuest(uint16) airecv clsend;
  chooseTrack(int8) airecv clsend;
};

dclass DistributedHQInterior : DistributedObject {
  setZoneIdAndBlock(uint32, uint16) required broadcast ram;
  setLeaderBoard(blob) required broadcast ram;
  setTutorial(uint8) required broadcast ram;
};

dclass SafeZoneManager : DistributedObject {
  enterSafeZone() airecv clsend;
  exitSafeZone() airecv clsend;
};

dclass PurchaseManager : DistributedObject {
  setPlayerIds(uint32, uint32, uint32, uint32) required broadcast ram;
  setNewbieIds(uint32array) required broadcast ram;
  setMinigamePoints(uint8, uint8, uint8, uint8) required broadcast ram;
  setPlayerMoney(uint8, uint8, uint8, uint8) required broadcast ram;
  setPlayerStates(uint8, uint8, uint8, uint8) required broadcast ram;
  setCountdown(int16) required broadcast ram;
  setMetagameRound(int8) required broadcast ram;
  setVotesArray(int16array) required broadcast ram;
  requestExit() airecv clsend;
  requestPlayAgain() airecv clsend;
  setInventory(blob, int16, uint8) airecv clsend;
  setPurchaseExit() broadcast;
};

dclass NewbiePurchaseManager : PurchaseManager {
  setOwnedNewbieId(uint32) required broadcast ram;
};

dclass DistributedCCharBase : DistributedObject {
  setChat(uint32, uint32, uint32) broadcast;
  fadeAway() broadcast;
  setWalk(string, string, int16) required broadcast ram;
  avatarEnter() airecv clsend;
  avatarExit() airecv clsend;
  setNearbyAvatarChat(char [0-1024]) airecv clsend;
  setNearbyAvatarSC(uint16) airecv clsend;
  setNearbyAvatarSCCustom(uint16) airecv clsend;
  setNearbyAvatarSCToontask(uint32, uint32, uint32, uint8) airecv clsend;
};

dclass DistributedMickey : DistributedCCharBase {
};

dclass DistributedVampireMickey : DistributedMickey {
};

dclass DistributedTrolley : DistributedObject {
  setState(string, int16) broadcast ram;
  fillSlot0(uint32) broadcast ram;
  fillSlot1(uint32) broadcast ram;
  fillSlot2(uint32) broadcast ram;
  fillSlot3(uint32) broadcast ram;
  emptySlot0(uint32, int16) broadcast ram;
  emptySlot1(uint32, int16) broadcast ram;
  emptySlot2(uint32, int16) broadcast ram;
  emptySlot3(uint32, int16) broadcast ram;
  requestBoard() airecv clsend;
  rejectBoard(uint32);
  requestExit() airecv clsend;
  setMinigameZone(uint32, uint16);
};

dclass DistributedMinigame : DistributedObject {
  setParticipants(uint32array) broadcast ram required;
  setTrolleyZone(uint32) broadcast ram required;
  setStartingVotes(uint16array) broadcast ram required;
  setMetagameRound(int8) broadcast ram required;
  setDifficultyOverrides(int32, int32) broadcast ram required;
  setAvatarJoined() airecv clsend;
  setAvatarReady() airecv clsend;
  setAvatarExited() airecv clsend;
  requestExit() airecv clsend;
  setGameReady() broadcast;
  setGameStart(int16) broadcast;
  setGameExit() broadcast;
  setGameAbort() broadcast;
};

dclass DistributedMinigameTemplate : DistributedMinigame {
};

dclass DistributedRaceGame : DistributedMinigame {
  setTimerStartTime(int16) broadcast;
  setAvatarChoice(uint8) airecv clsend;
  setAvatarChose(uint32) broadcast;
  setChancePositions(uint8array) broadcast;
  setServerChoices(int8array, uint8array, int8array) broadcast;
};

dclass DistributedCannonGame : DistributedMinigame {
  setCannonPosition(int32/100, uint32/100) airecv clsend;
  setCannonLit(int32/100, uint32/100) airecv clsend;
  updateCannonPosition(uint32, int32/100, uint32/100) broadcast;
  setCannonWillFire(uint32, int32/100, int32/100, uint32/100) broadcast;
  setToonWillLandInWater(int32/100) airecv clsend;
  announceToonWillLandInWater(uint32, int32/100) broadcast;
};

dclass DistributedPhotoGame : DistributedMinigame {
  newClientPhotoScore(uint8, char [0-256], uint32/100) airecv clsend;
  newAIPhotoScore(uint32, uint8, uint32/100) broadcast;
  filmOut() airecv clsend;
};

dclass DistributedPatternGame : DistributedMinigame {
  reportPlayerReady() airecv clsend;
  setPattern(uint8array) broadcast;
  reportPlayerPattern(uint8array, uint16/1000) airecv clsend;
  setPlayerPatterns(uint8array, uint8array, uint8array, uint8array, uint32) broadcast;
  reportButtonPress(uint8, uint8) airecv clsend;
  remoteButtonPressed(uint32, uint8, uint8) broadcast;
};

dclass DistributedRingGame : DistributedMinigame {
  setTimeBase(int16) broadcast ram required;
  setColorIndices(int8, int8, int8, int8) broadcast ram required;
  setToonGotRing(uint8) airecv clsend;
  setRingGroupResults(uint8) broadcast;
};

dclass DistributedTagGame : DistributedMinigame {
  tag(uint32) airecv clsend;
  setIt(uint32) broadcast;
  setTreasureScore(uint16array) broadcast;
};

dclass DistributedMazeGame : DistributedMinigame {
  claimTreasure(uint32) airecv clsend;
  setTreasureGrabbed(uint32, uint32) broadcast;
  allTreasuresTaken() broadcast;
  hitBySuit(uint32, int16) clsend broadcast;
};

dclass DistributedTugOfWarGame : DistributedMinigame {
  reportPlayerReady(uint8) airecv clsend;
  sendGoSignal(uint8array) broadcast;
  sendStopSignal(uint32array, uint32array, uint32array) broadcast;
  sendGameType(uint8, uint8) broadcast;
  reportEndOfContest(uint8) airecv clsend;
  sendNewAvIdList(uint32array) airecv clsend;
  reportCurrentKeyRate(uint32, int16/100) airecv clsend;
  sendCurrentPosition(uint32array, int16array/1000) broadcast;
  sendSuitPosition(int32/1000) broadcast;
  remoteKeyRateUpdate(uint32, uint32) broadcast;
};

dclass DistributedCatchGame : DistributedMinigame {
  claimCatch(uint32, uint32) airecv clsend;
  setObjectCaught(uint32, uint32) broadcast;
  hitBySuit(uint32, int16) clsend broadcast;
  reportDone() airecv clsend;
  setEveryoneDone() broadcast;
};

dclass DistributedDivingGame : DistributedMinigame {
  pickupTreasure(uint32) airecv clsend;
  setTreasureGrabbed(uint32, uint32) broadcast;
  handleFishCollision(uint32, uint32, uint32, char [0-256]) airecv clsend;
  performFishCollision(uint32, uint32, uint32, int16) broadcast;
  handleCrabCollision(uint32, char [0-256]) airecv clsend;
  performCrabCollision(uint32, int16) broadcast;
  setTreasureDropped(uint32, int16) broadcast;
  fishSpawn(int16, uint32, uint32, uint16) broadcast;
  removeFish(uint32) airecv clsend;
  getCrabMoving(uint32, int16, int8) airecv clsend;
  setCrabMoving(uint32, int16, int8, int8, int16, int8) broadcast;
  treasureRecovered() airecv clsend;
  incrementScore(uint32, uint32, int16) broadcast;
};

dclass DistributedTargetGame : DistributedMinigame {
  setTimeBase(int16) broadcast ram required;
  setToonGotRing(uint8) airecv clsend;
  setRingGroupResults(uint8) broadcast;
  setPlayerDone() airecv clsend;
  setScore(int32, int32) airecv clsend;
  setTargetSeed(uint32) broadcast ram;
  setRoundDone() broadcast;
  setSingleScore(uint16, uint32) broadcast;
  setGameDone() broadcast;
};

dclass DistributedPairingGame : DistributedMinigame {
  setDeckSeed(uint32) required broadcast ram;
  setMaxOpenCards(uint8) broadcast ram;
  openCardRequest(int16, int16) airecv clsend;
  openCardResult(int16, uint32, int16, int8, int16array) broadcast;
  reportDone() airecv clsend;
  setEveryoneDone() broadcast;
  setSignaling(uint32) clsend broadcast;
};

dclass DistributedVineGame : DistributedMinigame {
  reachedEndVine(int8) clsend airecv;
  setNewVine(uint32, int8, uint32/10000, int8) airecv clsend broadcast;
  setNewVineT(uint32, uint32/10000, int8) clsend broadcast;
  setJumpingFromVine(uint32, int8, int8, int32/100, int16/100, int16/100, int16) clsend broadcast;
  claimTreasure(uint32) airecv clsend;
  setTreasureGrabbed(uint32, uint32) broadcast;
  setScore(uint32, uint32) broadcast;
  allAtEndVine() broadcast;
  setFallingFromVine(uint32, int8, int8, int32/100, int16/100, int16/100, int16, int8) clsend broadcast;
  setFallingFromMidair(uint32, int8, int32/100, int16/100, int16/100, int16, int8) clsend broadcast;
  setVineSections(uint8array) required broadcast ram;
};

dclass DistributedTreasure : DistributedObject {
  setPosition(int16/10, int16/10, int16/10) required broadcast ram;
  requestGrab() airecv clsend;
  setGrab(uint32) broadcast ram;
  setReject() broadcast;
};

dclass DistributedDDTreasure : DistributedTreasure {
};

dclass DistributedDGTreasure : DistributedTreasure {
};

dclass DistributedDLTreasure : DistributedTreasure {
};

dclass DistributedTTTreasure : DistributedTreasure {
};

dclass DistributedBRTreasure : DistributedTreasure {
};

dclass DistributedMMTreasure : DistributedTreasure {
};

dclass DistributedOZTreasure : DistributedTreasure {
};

dclass DistributedETreasure : DistributedTreasure {
};

dclass DistributedEFlyingTreasure : DistributedTreasure {
};

dclass DistributedTagTreasure : DistributedTreasure {
};

dclass DistributedButterfly : DistributedObject {
  setArea(int16, int16) required broadcast ram;
  setState(int8, uint8, uint8, uint16/10, int16) required broadcast ram;
  avatarEnter() airecv clsend;
};

dclass DistributedTrophyMgr : DistributedObject {
  requestTrophyScore() airecv clsend;
};

dclass DistributedBuilding : DistributedObject {
  setBlock(uint16, uint32) required broadcast ram;
  setSuitData(int8, int8, int8) required broadcast ram;
  setVictorList(uint32array) broadcast ram;
  setState(string, int16) broadcast ram;
  setVictorReady() airecv clsend;
};

dclass DistributedAnimBuilding : DistributedBuilding {
};

dclass DistributedToonInterior : DistributedObject {
  setZoneIdAndBlock(uint32, uint16) required broadcast ram;
  setToonData(blob) required broadcast ram;
  setState(string, int16) required broadcast ram;
};

dclass DistributedToonHallInterior : DistributedToonInterior {
};

dclass DistributedSuitInterior : DistributedObject {
  setZoneId(uint32) required broadcast ram;
  setExtZoneId(uint32) required broadcast ram;
  setDistBldgDoId(uint32) required broadcast ram;
  setNumFloors(int8) required broadcast ram;
  setToons(uint32array, uint16) broadcast ram;
  setSuits(uint32array, uint32array, uint16array) broadcast ram;
  setState(string, int16) required broadcast ram;
  setAvatarJoined() airecv clsend;
  elevatorDone() airecv clsend;
  reserveJoinDone() airecv clsend;
};

dclass DistributedCogdoBarrel : DistributedObject {
  requestGrab() airecv clsend;
  setIndex(uint32) required broadcast ram;
  setState(uint32) required broadcast ram;
  setGrab(uint32) broadcast ram;
  setReject() broadcast;
};

dclass DistributedCogdoInterior : DistributedObject {
  setZoneId(uint32) required broadcast ram;
  setExtZoneId(uint32) required broadcast ram;
  setDistBldgDoId(uint32) required broadcast ram;
  setNumFloors(int8) required broadcast ram;
  setShopOwnerNpcId(uint32) required broadcast ram;
  setSOSNpcId(uint32) broadcast ram;
  setFOType(int8) broadcast ram;
  setToons(uint32array, uint16) broadcast ram;
  setSuits(uint32array, uint32array, uint16array) broadcast ram;
  setState(string, int16) required broadcast ram;
  setAvatarJoined() airecv clsend;
  elevatorDone() airecv clsend;
  reserveJoinDone() airecv clsend;
  toonLeftBarrelRoom() airecv clsend;
  toonBarrelRoomIntroDone() airecv clsend;
  setBarrelRoomReward(uint32 [], uint8 []) broadcast;
  toonBarrelRoomRewardDone() airecv clsend;
};

dclass DistributedAnimatedProp : DistributedObject {
  setPropId(uint16) required broadcast ram;
  setAvatarInteract(uint32) required broadcast ram;
  requestInteract() airecv clsend;
  rejectInteract();
  requestExit() airecv clsend;
  avatarExit(uint32) broadcast;
  setState(string, int16) required broadcast ram;
};

dclass DistributedKnockKnockDoor : DistributedAnimatedProp {
};

dclass DistributedElevator : DistributedObject {
  setBldgDoId(uint32) required broadcast ram;
  setState(string, int16) broadcast ram;
  fillSlot0(uint32, uint8) broadcast ram;
  fillSlot1(uint32, uint8) broadcast ram;
  fillSlot2(uint32, uint8) broadcast ram;
  fillSlot3(uint32, uint8) broadcast ram;
  fillSlot4(uint32, uint8) broadcast ram;
  fillSlot5(uint32, uint8) broadcast ram;
  fillSlot6(uint32, uint8) broadcast ram;
  fillSlot7(uint32, uint8) broadcast ram;
  emptySlot0(uint32, int8, int16, int16) broadcast ram;
  emptySlot1(uint32, int8, int16, int16) broadcast ram;
  emptySlot2(uint32, int8, int16, int16) broadcast ram;
  emptySlot3(uint32, int8, int16, int16) broadcast ram;
  emptySlot4(uint32, int8, int16, int16) broadcast ram;
  emptySlot5(uint32, int8, int16, int16) broadcast ram;
  emptySlot6(uint32, int8, int16, int16) broadcast ram;
  emptySlot7(uint32, int8, int16, int16) broadcast ram;
  requestBoard() airecv clsend;
  rejectBoard(uint32, uint8);
  requestExit() airecv clsend;
  setElevatorTripId(uint32) required broadcast ram;
  setAntiShuffle(uint8) required broadcast ram;
  setMinLaff(uint8) required broadcast ram;
};

dclass DistributedElevatorFSM : DistributedObject {
  setBldgDoId(uint32) required broadcast ram;
  setState(string, int16) broadcast ram;
  fillSlot0(uint32) broadcast ram;
  fillSlot1(uint32) broadcast ram;
  fillSlot2(uint32) broadcast ram;
  fillSlot3(uint32) broadcast ram;
  fillSlot4(uint32) broadcast ram;
  fillSlot5(uint32) broadcast ram;
  fillSlot6(uint32) broadcast ram;
  fillSlot7(uint32) broadcast ram;
  emptySlot0(uint32, int8, int16) broadcast ram;
  emptySlot1(uint32, int8, int16) broadcast ram;
  emptySlot2(uint32, int8, int16) broadcast ram;
  emptySlot3(uint32, int8, int16) broadcast ram;
  emptySlot4(uint32, int8, int16) broadcast ram;
  emptySlot5(uint32, int8, int16) broadcast ram;
  emptySlot6(uint32, int8, int16) broadcast ram;
  emptySlot7(uint32, int8, int16) broadcast ram;
  requestBoard() airecv clsend;
  rejectBoard(uint32, uint8);
  requestExit() airecv clsend;
  setElevatorTripId(uint32) required broadcast ram;
  setAntiShuffle(uint8) required broadcast ram;
  setMinLaff(uint8) required broadcast ram;
};

dclass DistributedElevatorFloor : DistributedElevatorFSM {
  setFloor(int8) broadcast ram;
  setLocked(uint16) required broadcast ram;
  setEntering(uint16) required broadcast ram;
  kickToonsOut() broadcast;
  setLatch(uint32) required broadcast ram;
};

dclass DistributedElevatorExt : DistributedElevator {
  setFloor(int8) broadcast ram;
};

dclass DistributedLawOfficeElevatorExt : DistributedElevatorExt {
  setEntranceId(uint8) required broadcast ram;
  setLawOfficeInteriorZone(uint32);
  setLawOfficeInteriorZoneForce(uint32);
};

dclass DistributedElevatorInt : DistributedElevator {
  requestBuildingExit() airecv clsend;
  forcedExit(uint32);
};

dclass DistributedFactoryElevatorExt : DistributedElevatorExt {
  setEntranceId(uint8) required broadcast ram;
  setFactoryInteriorZone(uint32);
  setFactoryInteriorZoneForce(uint32);
};

dclass DistributedMintElevatorExt : DistributedElevatorExt {
  setMintId(uint16) required broadcast ram;
  setMintInteriorZone(uint32);
  setMintInteriorZoneForce(uint32);
};

dclass DistributedCogdoElevatorExt : DistributedElevatorExt {
};

dclass DistributedLawOfficeElevatorInt : DistributedElevatorFloor {
  setLawOfficeInteriorZone(uint32);
};

dclass DistributedCogdoElevatorInt : DistributedElevatorInt {
};

dclass DistributedBossElevator : DistributedElevatorExt {
  setBossOfficeZone(uint32);
  setBossOfficeZoneForce(uint32);
};

dclass DistributedVPElevator : DistributedBossElevator {
};

dclass DistributedCFOElevator : DistributedBossElevator {
};

dclass DistributedCJElevator : DistributedBossElevator {
};

dclass DistributedBBElevator : DistributedBossElevator {
};

dclass DistributedNPCFlippyInToonHall : DistributedNPCToon {
};

dclass DistributedNPCScientist : DistributedNPCToonBase {
  setChat(char [0-1024], uint8, uint32, uint8, uint8) ownsend broadcast;
};

dclass DistributedNPCClerk : DistributedNPCToonBase {
  setMovie(uint8, uint32, uint32, int16) broadcast ram;
  setInventory(blob, int16, uint8) airecv clsend;
};

dclass DistributedNPCTailor : DistributedNPCToonBase {
  setMovie(uint8, uint32, uint32, int16) broadcast ram;
  setDNA(blob, int8, uint8) airecv clsend;
  setCustomerDNA(uint32, blob) broadcast ram;
};

dclass DistributedNPCBlocker : DistributedNPCToonBase {
  setMovie(uint8, uint32, uint32, int16) broadcast ram;
};

dclass DistributedNPCFisherman : DistributedNPCToonBase {
  setMovie(uint8, uint32, uint32, uint32array, int16) broadcast ram;
  completeSale(uint8) airecv clsend;
};

dclass DistributedNPCPartyPerson : DistributedNPCToonBase {
  setMovie(uint8, uint32, uint32, uint32array, int16) broadcast ram;
  answer(uint8) airecv clsend;
};

dclass DistributedNPCPetclerk : DistributedNPCToonBase {
  setMovie(uint8, uint32, uint32, uint32array, int16) broadcast ram;
  setPetSeeds(uint32array);
  petAdopted(uint8, uint32) airecv clsend;
  petReturned() airecv clsend;
  fishSold() airecv clsend;
  transactionDone() airecv clsend;
};

dclass DistributedNPCKartClerk : DistributedNPCToonBase {
  setMovie(uint8, uint32, uint32, uint32array, int16) broadcast ram;
  buyKart(uint8) airecv clsend;
  buyAccessory(uint8) airecv clsend;
  transactionDone() airecv clsend;
};

dclass DistributedGagshopInterior : DistributedObject {
  setZoneIdAndBlock(uint32, uint16) required broadcast ram;
};

dclass DistributedPetshopInterior : DistributedObject {
  setZoneIdAndBlock(uint32, uint16) required broadcast ram;
};

dclass DistributedKartShopInterior : DistributedObject {
  setZoneIdAndBlock(uint32, uint16) required broadcast ram;
};

dclass DistributedAnimDoor : DistributedDoor {
};

dclass DistributedHouseDoor : DistributedDoor {
};

dclass DistributedCogHQDoor : DistributedDoor {
};

dclass DistributedSellbotHQDoor : DistributedCogHQDoor {
  informPlayer(uint8) broadcast ram;
};

dclass DistributedBoat : DistributedObject {
  setState(string, int16) required broadcast ram;
};

dclass DistributedMMPiano : DistributedObject {
  requestSpeedUp() airecv clsend;
  requestChangeDirection() airecv clsend;
  setSpeed(int16/1000, uint16/100, int16) broadcast ram;
  playSpeedUp(uint32) broadcast;
  playChangeDirection(uint32) broadcast;
};

dclass DistributedDGFlower : DistributedObject {
  avatarEnter() airecv clsend;
  avatarExit() airecv clsend;
  setHeight(uint8/10) broadcast ram;
};

dclass DistributedWitchMinnie : DistributedMickey {
};

dclass DistributedMinnie : DistributedCCharBase {
};

dclass DistributedGoofy : DistributedCCharBase {
};

dclass DistributedDaisy : DistributedCCharBase {
};

dclass DistributedSockHopDaisy : DistributedDaisy {
};

dclass DistributedChip : DistributedCCharBase {
};

dclass DistributedPoliceChip : DistributedChip {
};

dclass DistributedDale : DistributedCCharBase {
  setFollowChip(string, string, int16, int16/100, int16/100) broadcast ram;
  setChipId(uint32) required broadcast ram;
};

dclass DistributedJailbirdDale : DistributedDale {
};

dclass DistributedDonald : DistributedCCharBase {
};

dclass DistributedFrankenDonald : DistributedDonald {
};

dclass DistributedDonaldDock : DistributedCCharBase {
};

dclass DistributedPluto : DistributedCCharBase {
};

dclass DistributedWesternPluto : DistributedPluto {
};

dclass DistributedGoofySpeedway : DistributedCCharBase {
};

dclass DistributedSuperGoofy : DistributedGoofySpeedway {
};

dclass DistributedTimer : DistributedObject {
  setStartTime(int32) broadcast ram required;
};

dclass LobbyManager : DistributedObject {
};

dclass DistributedBoardingParty : DistributedObject {
  postGroupInfo(uint32, uint32array, uint32array, uint32array) broadcast;
  informDestinationInfo(uint8) clsend airecv;
  postDestinationInfo(uint8) broadcast;
  postInvite(uint32, uint32) broadcast;
  postInviteCanceled() broadcast;
  postKick(uint32) broadcast;
  postKickReject(uint32, uint32, uint32) broadcast;
  postSizeReject(uint32, uint32, uint32) broadcast;
  postInviteAccepted(uint32) broadcast;
  postInviteDelcined(uint32) broadcast;
  postInviteNotQualify(uint32, int8, uint32) broadcast;
  postAlreadyInGroup() broadcast;
  postGroupDissolve(uint32, uint32, uint32 [], uint8) broadcast;
  postMessageAcceptanceFailed(uint32, int8) broadcast;
  postGroupAlreadyFull() broadcast;
  postSomethingMissing() broadcast;
  postRejectBoard(uint32, int8, uint32 [], uint32 []) broadcast;
  postRejectGoto(uint32, int8, uint32 [], uint32 []) broadcast;
  postMessageInvited(uint32, uint32) broadcast;
  postMessageInvitationFailed(uint32) broadcast;
  acceptGoToFirstTime(uint32) broadcast;
  acceptGoToSecondTime(uint32) broadcast;
  rejectGoToRequest(uint32, int8, uint32 [], uint32 []) broadcast;
  requestInvite(uint32) airecv clsend;
  requestCancelInvite(uint32) airecv clsend;
  requestAcceptInvite(uint32, uint32) airecv clsend;
  requestRejectInvite(uint32, uint32) airecv clsend;
  requestKick(uint32) airecv clsend;
  requestLeave(uint32) airecv clsend;
  requestBoard(uint32) airecv clsend;
  requestGoToFirstTime(uint32) airecv clsend;
  requestGoToSecondTime(uint32) airecv clsend;
  setElevatorIdList(uint32array) required broadcast ram;
  setGroupSize(uint8) required broadcast ram;
};

dclass DistributedSuitBase : DistributedObject {
  denyBattle();
  setDNAString(blob) required broadcast ram;
  setLevelDist(int16) required broadcast ram;
  setBrushOff(int16) broadcast;
  setSkelecog(uint8) required broadcast ram;
  setSkeleRevives(uint8) required broadcast ram;
  setHP(int16) required broadcast ram;
};

dclass DistributedSuit : DistributedSuitBase {
  requestBattle(int16/10, int16/10, int16/10, int16/10, int16/10, int16/10) airecv clsend;
  setSPDoId(uint32) required broadcast ram;
  setPathEndpoints(uint16, uint16, uint16, uint16) required broadcast ram;
  setPathPosition(uint16, int16) required broadcast ram;
  setPathState(int8) required broadcast ram;
  debugSuitPosition(int16/10, int16, int16/10, int16/10, int16) broadcast;
};

dclass DistributedTutorialSuit : DistributedSuitBase {
  requestBattle(int16/10, int16/10, int16/10, int16/10, int16/10, int16/10) airecv clsend;
};

dclass DistributedFactorySuit : DistributedSuitBase {
  setLevelDoId(uint32) required broadcast ram;
  setCogId(uint32) required broadcast ram;
  setReserve(uint8) required broadcast ram;
  requestBattle(int16/10, int16/10, int16/10, int16/10, int16/10, int16/10) airecv clsend;
  setAlert(uint32) airecv clsend;
  setConfrontToon(uint32) broadcast;
  setStrayed() airecv clsend;
  setReturn() broadcast;
};

dclass DistributedLevel : DistributedObject {
  setLevelZoneId(uint32) required broadcast ram;
  setPlayerIds(uint32array) required broadcast ram;
  setEntranceId(uint8) required broadcast ram;
  setZoneIds(uint32array) broadcast ram;
  setStartTimestamp(int32) broadcast ram;
  setOuch(uint8) airecv clsend;
  requestCurrentLevelSpec(string, string) airecv clsend;
  setSpecDeny(blob);
  setSpecSenderDoId(uint32);
  setAttribChange(uint32, blob, blob, blob) broadcast;
};

dclass DistributedEntity : DistributedObject {
  setLevelDoId(uint32) required broadcast ram;
  setEntId(uint32) required broadcast ram;
};

dclass DistributedInteractiveEntity : DistributedEntity {
  setAvatarInteract(uint32) required broadcast ram;
  requestInteract() airecv clsend;
  rejectInteract();
  requestExit() airecv clsend;
  avatarExit(uint32) broadcast;
  setState(string, int32) required broadcast ram;
};

dclass DistributedFactory : DistributedLevel {
  setFactoryId(uint16) required broadcast ram;
  setSuits(uint32array, uint32array) broadcast ram;
  setForemanConfronted(uint32) broadcast ram;
  setDefeated() broadcast ram;
};

dclass DistributedBattleBase : DistributedObject {
  setLevelDoId(uint32) required broadcast ram;
  setBattleCellId(uint32) required broadcast ram;
  setInteractivePropTrackBonus(int8) required broadcast ram;
  setPosition(int16/10, int16/10, int16/10) required broadcast ram;
  setZoneId(uint32) required broadcast ram;
  setInitialSuitPos(int16/10, int16/10, int16/10) required broadcast ram;
  setMembers(uint32array, string, string, string, string, string, uint32array, string, string, string, string, int16) required broadcast ram;
  adjust(int16) broadcast;
  setMovie(int8, uint32array, uint32array, int8, int8, int8, int32, int16array, int16, int16, int16array, int8, int8, int8, int8, int8, int32, int16array, int16, int16, int16array, int8, int8, int8, int8, int8, int32, int16array, int16, int16, int16array, int8, int8, int8, int8, int8, int32, int16array, int16, int16, int16array, int8, int8, int8, int8, int8, int16array, int8, int8, int8, int8, int8, int8, int16array, int8, int8, int8, int8, int8, int8, int16array, int8, int8, int8, int8, int8, int8, int16array, int8, int8, int8) required broadcast ram;
  setChosenToonAttacks(uint32array, int16array, int16array, int32array) broadcast ram;
  setBattleExperience(int32, int16array, int16array, uint32array, int16array, int16array, int16array, int16array, uint32array, int32, int16array, int16array, uint32array, int16array, int16array, int16array, int16array, uint32array, int32, int16array, int16array, uint32array, int16array, int16array, int16array, int16array, uint32array, int32, int16array, int16array, uint32array, int16array, int16array, int16array, int16array, uint32array, uint8array, int16array, uint32array) required broadcast ram;
  denyLocalToonJoin();
  setBossBattle(uint8) required broadcast ram;
  setState(string, int16) required broadcast ram;
  faceOffDone() airecv clsend;
  toonRequestJoin(int16/10, int16/10, int16/10) airecv clsend;
  toonRequestRun() airecv clsend;
  toonDied() airecv clsend;
  adjustDone() airecv clsend;
  timeout() airecv clsend;
  movieDone() airecv clsend;
  rewardDone() airecv clsend;
  joinDone(uint32) airecv clsend;
  requestAttack(int8, int8, int32) airecv clsend;
  requestPetProxy(uint32) airecv clsend;
};

dclass DistributedBattle : DistributedBattleBase {
};

dclass DistributedBattleBldg : DistributedBattleBase {
};

dclass DistributedLevelBattle : DistributedBattle {
};

dclass DistributedBattleFactory : DistributedLevelBattle {
};

dclass DistributedLift : DistributedEntity {
  setStateTransition(uint8, uint8, uint32) required broadcast ram;
  setAvatarEnter() airecv clsend;
  setAvatarLeave() airecv clsend;
};

dclass DistributedDoorEntity : DistributedEntity {
  setLocksState(uint16) required broadcast ram;
  setDoorState(uint8, int32) required broadcast ram;
  requestOpen() airecv clsend;
};

dclass DistributedSwitch : DistributedInteractiveEntity {
};

dclass DistributedButton : DistributedSwitch {
};

dclass DistributedTrigger : DistributedSwitch {
};

dclass DistributedCrushableEntity : DistributedEntity {
  setPosition(int16/10, int16/10, int16/10) broadcast ram;
  setCrushed(uint32, uint8) broadcast ram;
};

dclass DistributedCrusherEntity : DistributedEntity {
};

dclass DistributedElevatorMarker : DistributedEntity {
};

dclass DistributedBarrelBase : DistributedEntity {
  requestGrab() airecv clsend;
  setGrab(uint32) broadcast ram;
  setReject() broadcast;
};

dclass DistributedGagBarrel : DistributedBarrelBase {
};

dclass DistributedBeanBarrel : DistributedBarrelBase {
};

dclass DistributedHealBarrel : DistributedBarrelBase {
};

dclass DistributedStomper : DistributedCrusherEntity {
  setMovie(uint8, int16, uint32array) broadcast ram;
};

dclass DistributedStomperPair : DistributedEntity {
  setChildren(uint32array) broadcast ram;
  setSquash() airecv clsend;
};

dclass DistributedGrid : DistributedEntity {
};

dclass ActiveCell : DistributedEntity {
  setState(uint8, uint32) broadcast ram;
};

dclass DirectionalCell : ActiveCell {
};

dclass CrusherCell : ActiveCell {
};

dclass DistributedCrate : DistributedCrushableEntity {
  requestPush(uint8) airecv clsend;
  setReject();
  setAccept() broadcast;
  setMoveTo(uint32, int16/10, int16/10, int16/10, int16/10, int16/10, int16/10) broadcast ram;
  setDone() airecv clsend;
};

dclass DistributedSinkingPlatform : DistributedEntity {
  setOnOff(uint8, uint32) airecv clsend;
  setSinkMode(uint32, uint8, uint32) broadcast ram;
};

dclass DistributedGoon : DistributedCrushableEntity {
  requestBattle(int16/10) airecv clsend;
  requestStunned(int16/10) airecv clsend;
  requestResync() airecv clsend;
  setParameterize(int16/10, int16/10, int16/10, uint32) airecv clsend;
  setMovie(uint8, uint32, int32/10, int16) broadcast ram;
};

dclass DistributedGridGoon : DistributedGoon {
  setPathPts(int16/10, int16/10, int16/10, int16/10, int16/10, int16/10) broadcast ram;
};

dclass BattleBlocker : DistributedEntity {
  setActive(uint8) required broadcast ram;
  setSuits(uint32array) broadcast ram;
  setBattle(uint32) broadcast ram;
  setBattleFinished() broadcast ram;
};

dclass DistributedMintSuit : DistributedFactorySuit {
};

dclass DistributedStageSuit : DistributedFactorySuit {
};

dclass DistributedBossCog : DistributedNode {
  setDNAString(blob) required broadcast db;
  setToonIds(uint32array, uint32array, uint32array) broadcast ram;
  setBattleIds(uint8, uint32, uint32) broadcast ram;
  setArenaSide(uint8) broadcast ram;
  avatarEnter() airecv clsend;
  avatarExit() airecv clsend;
  avatarNearEnter() airecv clsend;
  avatarNearExit() airecv clsend;
  toonDied(uint32) broadcast;
  setBattleExperience(int32, int16array, int16array, uint32array, int16array, int16array, int16array, int16array, uint32array, int32, int16array, int16array, uint32array, int16array, int16array, int16array, int16array, uint32array, int32, int16array, int16array, uint32array, int16array, int16array, int16array, int16array, uint32array, int32, int16array, int16array, uint32array, int16array, int16array, int16array, int16array, uint32array, int32, int16array, int16array, uint32array, int16array, int16array, int16array, int16array, uint32array, int32, int16array, int16array, uint32array, int16array, int16array, int16array, int16array, uint32array, int32, int16array, int16array, uint32array, int16array, int16array, int16array, int16array, uint32array, int32, int16array, int16array, uint32array, int16array, int16array, int16array, int16array, uint32array, uint8array, int16array, uint32array) required broadcast ram;
  zapToon(int16/10, int16/10, int16/10, int16/10, int16/10, int16/10, int8/100, int8/100, uint8, int16) airecv clsend;
  showZapToon(uint32, int16/10, int16/10, int16/10, int16/10, int16/10, int16/10, uint8, int16) broadcast;
  setAttackCode(uint8, uint32) broadcast;
};

dclass DistributedSellbotBoss : DistributedBossCog {
  setCagedToonNpcId(uint32) required broadcast ram;
  setDooberIds(uint32array) broadcast ram;
  setBossDamage(uint16, uint8, int16) broadcast ram;
  setState(string) broadcast ram;
  hitBoss(uint8) airecv clsend;
  hitBossInsides() airecv clsend;
  hitToon(uint32) airecv clsend;
  finalPieSplat() airecv clsend;
  touchCage() airecv clsend;
  doStrafe(uint8, uint8) broadcast;
  cagedToonBattleThree(uint16, uint32) broadcast;
  toonPromoted(uint8(0-1));
};

dclass DistributedMintBattle : DistributedLevelBattle {
};

dclass DistributedStageBattle : DistributedLevelBattle {
};

dclass DistributedBattleFinal : DistributedBattleBase {
  setBossCogId(uint32) required broadcast ram;
  setBattleNumber(uint8) required broadcast ram;
  setBattleSide(uint8) required broadcast ram;
};

dclass DistributedCashbotBoss : DistributedBossCog {
  setState(string) broadcast ram;
  setBossDamage(uint16) broadcast ram;
  setRewardId(uint16) broadcast ram;
  applyReward() airecv clsend;
};

struct LinkPosition {
  int16/100 x;
  int16/100 y;
  int16/100 z;
};

dclass DistributedCashbotBossCrane : DistributedObject {
  setBossCogId(uint32) required broadcast ram;
  setIndex(uint8) required broadcast ram;
  setState(char, uint32) broadcast ram;
  requestControl() airecv clsend;
  requestFree() airecv clsend;
  clearSmoothing(int8) broadcast clsend;
  setCablePos(uint8, int16/100, uint16%360/100, LinkPosition [3], int16) broadcast clsend;
};

dclass DistributedCashbotBossObject : DistributedObject {
  setBossCogId(uint32) required broadcast ram;
  setObjectState(char, uint32, uint32) broadcast ram;
  requestGrab() airecv clsend;
  rejectGrab();
  requestDrop() airecv clsend;
  hitFloor() clsend;
  requestFree(int16/10, int16/10, int16/10, uint16%360/100) airecv clsend;
  hitBoss(uint16/255) airecv clsend;
  setX(int16/10) broadcast ram clsend airecv;
  setY(int16/10) broadcast ram clsend airecv;
  setZ(int16/10) broadcast ram clsend airecv;
  setH(int16%360/10) broadcast ram clsend airecv;
  setP(int16%360/10) broadcast ram clsend airecv;
  setR(int16%360/10) broadcast ram clsend airecv;
  setPos : setX, setY, setZ;
  setHpr : setH, setP, setR;
  setPosHpr : setX, setY, setZ, setH, setP, setR;
  setXY : setX, setY;
  setXZ : setX, setZ;
  setXYH : setX, setY, setH;
  setXYZH : setX, setY, setZ, setH;
  setComponentL(uint64) broadcast ram clsend airecv;
  setComponentX(int16/10) broadcast ram clsend airecv;
  setComponentY(int16/10) broadcast ram clsend airecv;
  setComponentZ(int16/10) broadcast ram clsend airecv;
  setComponentH(int16%360/10) broadcast ram clsend airecv;
  setComponentP(int16%360/10) broadcast ram clsend airecv;
  setComponentR(int16%360/10) broadcast ram clsend airecv;
  setComponentT(int16) broadcast ram clsend airecv;
  setSmStop : setComponentT;
  setSmH : setComponentH, setComponentT;
  setSmZ : setComponentZ, setComponentT;
  setSmXY : setComponentX, setComponentY, setComponentT;
  setSmXZ : setComponentX, setComponentZ, setComponentT;
  setSmPos : setComponentX, setComponentY, setComponentZ, setComponentT;
  setSmHpr : setComponentH, setComponentP, setComponentR, setComponentT;
  setSmXYH : setComponentX, setComponentY, setComponentH, setComponentT;
  setSmXYZH : setComponentX, setComponentY, setComponentZ, setComponentH, setComponentT;
  setSmPosHpr : setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;
  setSmPosHprL : setComponentL, setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;
  clearSmoothing(int8) broadcast clsend;
};

dclass DistributedCashbotBossSafe : DistributedCashbotBossObject {
  setIndex(uint8) required broadcast ram;
  requestInitial() airecv clsend;
};

dclass DistributedCashbotBossGoon : DistributedCashbotBossObject {
  requestBattle(int16/10) airecv clsend;
  requestStunned(int16/10) airecv clsend;
  setVelocity(uint8/10) broadcast ram;
  setHFov(uint8) broadcast ram;
  setAttackRadius(uint8) broadcast ram;
  setStrength(uint8) broadcast ram;
  setGoonScale(uint8/50) broadcast ram;
  setupGoon : setVelocity, setHFov, setAttackRadius, setStrength, setGoonScale;
  setTarget(int16/10, int16/10, uint16%360/100, int16) broadcast ram;
  destroyGoon() broadcast clsend airecv;
};

dclass DistributedMint : DistributedObject {
  setZoneId(uint32) required broadcast ram;
  setMintId(uint16) required broadcast ram;
  setFloorNum(uint8) required broadcast ram;
  setRoomDoIds(uint32array) broadcast ram;
};

dclass DistributedMintRoom : DistributedLevel {
  setMintId(uint16) required broadcast ram;
  setRoomId(uint16) required broadcast ram;
  setRoomNum(uint8) required broadcast ram;
  setSuits(uint32array, uint32array) broadcast ram;
  setBossConfronted(uint32) broadcast ram;
  setDefeated() broadcast ram;
};

dclass DistributedCashbotBossTreasure : DistributedTreasure {
  setGoonId(uint32) required broadcast ram;
  setFinalPosition(int16/10, int16/10, int16/10) required broadcast ram;
  setStyle(uint16) required broadcast ram;
};

dclass DistributedLawOffice : DistributedObject {
  setLawOfficeId(uint16) required broadcast ram;
  startSignal() broadcast ram;
  readyForNextFloor() airecv clsend;
};

dclass DistributedLawOfficeFloor : DistributedLevel {
  setLawOfficeId(uint16) required broadcast ram;
  setSuits(uint32array, uint32array) broadcast ram;
  readyForNextFloor() airecv clsend;
  setForemanConfronted(uint32) broadcast ram;
  setDefeated() broadcast ram;
};

dclass DistributedLawbotBoss : DistributedBossCog {
  setState(string) broadcast ram;
  setBossDamage(uint16, uint8, int16) broadcast ram;
  touchWitnessStand() airecv clsend;
  hitBoss(uint8) airecv clsend;
  healBoss(uint8) airecv clsend;
  hitToon(uint32) airecv clsend;
  hitDefensePan() airecv clsend;
  hitProsecutionPan() airecv clsend;
  hitChair(uint8, uint8) airecv clsend;
  setLawyerIds(uint32array) broadcast ram;
  setTaunt(int8, int8) broadcast;
  toonGotHealed(uint32) broadcast;
  enteredBonusState() broadcast;
  setBattleDifficulty(uint8) broadcast ram;
};

dclass DistributedLawbotBossSuit : DistributedSuitBase {
  setPosHpr(int16/10, int16/10, int16/10, int16/10, int16/10, int16/10) required broadcast ram;
  doAttack(int16/10, int16/10, int16/10, int16/10, int16/10, int16/10) broadcast;
  doProsecute() broadcast;
  hitByToon() airecv clsend;
  doStun() broadcast;
};

dclass DistributedLawbotBossGavel : DistributedObject {
  setBossCogId(uint32) required broadcast ram;
  setIndex(uint8) required broadcast ram;
  setState(char) broadcast ram;
};

dclass DistributedLawbotCannon : DistributedObject {
  setBossCogId(uint32) required broadcast ram;
  setIndex(uint8) required broadcast ram;
  setPosHpr(int16/10, int16/10, int16/10, int16/10, int16/10, int16/10) required broadcast ram;
  requestEnter() airecv clsend;
  setMovie(int8, uint32, uint8) broadcast;
  setCannonPosition(int16/10, int16/10) airecv clsend;
  updateCannonPosition(uint32, int16/10, int16/10) broadcast;
  setCannonLit(int16/10, int16/10) airecv clsend;
  setCannonWillFire(uint32, int16/10, int16/10, int16/10, int16) broadcast;
  setLanded() airecv clsend;
  requestLeave() airecv clsend;
};

dclass DistributedLawbotChair : DistributedObject {
  setBossCogId(uint32) required broadcast ram;
  setIndex(uint8) required broadcast ram;
  setState(char) broadcast ram;
  showCogJurorFlying() broadcast;
  setToonJurorIndex(int8) broadcast ram;
};

dclass DistributedLaserField : BattleBlocker {
  setGrid(uint8, uint8) required broadcast ram;
  setField(uint8 []) required broadcast ram;
  setSuccess(uint8) broadcast ram;
  hit(int8, int8, int8, int8) airecv clsend;
  trapFire() airecv clsend;
  setActiveLF(uint8) broadcast ram;
  hideSuit(uint32array) broadcast ram;
  showSuit(uint32array) broadcast ram;
  setGridGame(string) broadcast ram;
};

struct golfGreenGameBoardData {
  uint8 posX;
  uint8 posZ;
  uint8 typeIndex;
};

struct golfGreenGameScoreData {
  uint32 avId;
  uint8 score;
};

dclass DistributedGolfGreenGame : BattleBlocker {
  requestJoin() airecv clsend;
  leaveGame() airecv clsend;
  acceptJoin(uint16, int32, uint32 []) broadcast ram;
  requestBoard(uint8) airecv clsend;
  startBoard(golfGreenGameBoardData [], uint8 []);
  signalDone(uint8) broadcast ram;
  boardCleared(uint32);
  scoreData(uint8, uint8, golfGreenGameScoreData []) broadcast ram;
  informGag(uint8, uint8);
  helpOthers(uint32) broadcast;
  setTimerStart(uint16, int32) broadcast ram;
};

dclass DistributedSecurityCamera : DistributedEntity {
  trapFire() airecv clsend;
  setTarget(uint8) broadcast ram;
};

dclass DistributedMover : DistributedEntity {
  startMove(int16) broadcast ram;
};

dclass DistributedStage : DistributedObject {
  setZoneId(uint32) required broadcast ram;
  setStageId(uint16) required broadcast ram;
  setLayoutIndex(uint16) required broadcast ram;
  setFloorNum(uint8) required broadcast ram;
  setRoomDoIds(uint32array) broadcast ram;
  setStageZone(uint32) broadcast ram;
  elevatorAlert(uint32) broadcast ram;
};

dclass DistributedStageRoom : DistributedLevel {
  setStageId(uint16) required broadcast ram;
  setRoomId(uint16) required broadcast ram;
  setRoomNum(uint8) required broadcast ram;
  setSuits(uint32array, uint32array) broadcast ram;
  setBossConfronted(uint32) broadcast ram;
  setDefeated() broadcast ram;
};

dclass DistributedBossbotBoss : DistributedBossCog {
  setState(string) broadcast ram;
  setBattleDifficulty(uint8) broadcast ram;
  requestGetFood(int8, int8, uint32) airecv clsend;
  toonGotFood(uint32, int8, int8, uint32) broadcast;
  requestServeFood(int8, int8) airecv clsend;
  toonServeFood(uint32, int8, int8) broadcast;
  hitBoss(uint8) airecv clsend;
  hitToon(uint32) airecv clsend;
  ballHitBoss(uint8) airecv clsend;
  setBossDamage(uint16, uint8, int16) broadcast ram;
  setSpeedDamage(uint16, uint8, int16) broadcast ram;
  reachedTable(uint8) airecv clsend;
  hitTable(uint8) airecv clsend;
  awayFromTable(uint8) airecv clsend;
  toonGotHealed(uint32) broadcast;
  requestGetToonup(int8, int8, uint32) airecv clsend;
  toonGotToonup(uint32, int8, int8, uint32) broadcast;
};

dclass DistributedCogKart : DistributedElevatorExt {
  setCountryClubId(uint16) required broadcast ram;
  setPosHpr(int16/10, int16/10, int16/10, int16/10, int16/10, int16/10) required broadcast ram;
  setCountryClubInteriorZone(uint32);
  setCountryClubInteriorZoneForce(uint32);
};

dclass DistributedCountryClub : DistributedObject {
  setZoneId(uint32) required broadcast ram;
  setBlockedRooms(uint8array) required broadcast ram;
  setCountryClubId(uint16) required broadcast ram;
  setLayoutIndex(uint16) required broadcast ram;
  setFloorNum(uint8) required broadcast ram;
  setRoomDoIds(uint32array) broadcast ram;
  setCountryClubZone(uint32) broadcast ram;
  elevatorAlert(uint32) broadcast ram;
};

dclass DistributedCountryClubRoom : DistributedLevel {
  setCountryClubId(uint16) required broadcast ram;
  setRoomId(uint16) required broadcast ram;
  setRoomNum(uint8) required broadcast ram;
  setSuits(uint32array, uint32array) broadcast ram;
  setBossConfronted(uint32) broadcast ram;
  setDefeated() broadcast ram;
  forceOuch(uint8) broadcast;
};

dclass DistributedMoleField : DistributedEntity {
  setGameStart(int16, uint8, uint16) broadcast;
  setClientTriggered() airecv clsend;
  whackedMole(int8, int16) airecv clsend;
  whackedBomb(int8, int16, int32) airecv clsend;
  updateMole(int8, int8) broadcast;
  reportToonHitByBomb(uint32, int8, int32) broadcast;
  setScore(int16) required broadcast ram;
  damageMe() airecv clsend;
  setPityWin() broadcast;
};

dclass DistributedCountryClubBattle : DistributedLevelBattle {
};

dclass DistributedClubElevator : DistributedElevatorFSM {
  setFloor(int8) broadcast ram;
  setLocked(uint16) required broadcast ram;
  setEntering(uint16) required broadcast ram;
  kickToonsOut() broadcast;
  setLatch(uint32) required broadcast ram;
};

dclass DistributedMaze : DistributedEntity {
  setRoomDoId(uint32) required broadcast ram;
  setGameStart(int16) broadcast;
  setClientTriggered() airecv clsend;
  setFinishedMaze() airecv clsend;
  setGameOver() broadcast;
  toonFinished(uint32, uint8, uint8) broadcast;
  damageMe() airecv clsend;
};

dclass DistributedBattleWaiters : DistributedBattleFinal {
};

dclass DistributedFoodBelt : DistributedObject {
  setBossCogId(uint32) required broadcast ram;
  setIndex(uint8) required broadcast ram;
  setState(char) broadcast ram;
};

dclass DistributedBanquetTable : DistributedObject {
  setIndex(uint8) required broadcast ram;
  setNumDiners(uint8) required broadcast ram;
  setBossCogId(uint32) required broadcast ram;
  setDinerInfo(uint8array, uint8array, uint8array) required broadcast ram;
  setState(char, uint32, int8) broadcast ram;
  setDinerStatus(uint8, uint8) broadcast;
  requestControl() airecv clsend;
  requestFree(int8) airecv clsend;
  setPitcherPos(uint8, uint16%360/100, int16) broadcast clsend;
  clearSmoothing(int8) broadcast clsend;
  firingWater(int32/100, int32/100, int32/100, int32/100, int32/100, int32/100) broadcast clsend;
  waterHitBoss(uint8) broadcast clsend;
};

dclass DistributedBattleDiners : DistributedBattleFinal {
};

dclass DistributedGolfSpot : DistributedObject {
  setIndex(uint8) required broadcast ram;
  setBossCogId(uint32) required broadcast ram;
  setState(char, uint32, int8) broadcast ram;
  setGoingToReward() broadcast ram;
  requestControl() airecv clsend;
  requestFree(int8) airecv clsend;
  setGolfSpotPos(uint8, uint16%360/100, int16) broadcast clsend;
  clearSmoothing(int8) broadcast clsend;
  setSwingInfo(uint8, int16/10, uint8) broadcast clsend;
};

struct TireInput {
  int32/100 force;
  int32/100 heading;
};

struct Coord3 {
  int32/100000 x;
  int32/100000 y;
  int32/100000 z;
};

dclass DistributedIceGame : DistributedMinigame {
  setForceArrowInfo(uint32, int32/100, int32/100) broadcast clsend;
  setAvatarChoice(int32/100, int32/100) airecv clsend;
  endingPositions(Coord3 []) airecv clsend;
  reportScoringMovieDone() airecv clsend;
  claimTreasure(uint8) airecv clsend;
  claimPenalty(uint8) airecv clsend;
  setTireInputs(TireInput []) broadcast;
  setTimerStartTime(int16) broadcast;
  setFinalPositions(Coord3 []) broadcast;
  setMatchAndRound(int8, int8) broadcast;
  setScores(int8, int8, int16array) broadcast;
  setNewState(string) broadcast;
  setTreasureGrabbed(uint32, uint32) broadcast;
  setPenaltyGrabbed(uint32, uint32) broadcast;
};

dclass DistributedCogThiefGame : DistributedMinigame {
  throwingPie(uint32, int32, int32/100, int32/100, int32/100, int32/100) clsend broadcast;
  hitBySuit(uint32, int32, int8, int32/100, int32/100, int32/100) clsend broadcast airecv;
  pieHitSuit(uint32, int32, int8, int32/100, int32/100, int32/100) clsend broadcast airecv;
  cogHitBarrel(int32, int8, int8, int32/100, int32/100, int32/100) clsend airecv;
  cogAtReturnPos(int32, int8, int8) clsend airecv;
  updateSuitGoal(int32, int32, int8, int8, int64, int32/100, int32/100, int32/100) broadcast;
  makeCogCarryBarrel(int32, int32, int8, int8, int32/100, int32/100, int32/100) broadcast;
  makeCogDropBarrel(int32, int32, int8, int8, int32/100, int32/100, int32/100) broadcast;
  markBarrelStolen(int32, int32, int8) broadcast;
};

struct twoDTreasureInfo {
  uint8 treasureIndex;
  uint8 treasureValue;
};

struct twoDSectionInfo {
  uint8 sectionIndex;
  uint8 enemyIndicesSelected[];
  twoDTreasureInfo treasureIndicesSelected[];
  uint8 spawnPointIndicesSelected[];
  uint8 stomperIndicesSelected[];
};

dclass DistributedTwoDGame : DistributedMinigame {
  showShootGun(uint32, int16) clsend broadcast;
  toonHitByEnemy(uint32, int16) clsend broadcast airecv;
  toonFellDown(uint32, int16) clsend broadcast airecv;
  toonSquished(uint32, int16) clsend broadcast airecv;
  toonVictory(uint32, int16) clsend broadcast airecv;
  claimTreasure(uint8, uint8) airecv clsend;
  claimEnemyShot(uint8, uint8) airecv clsend;
  reportDone() airecv clsend;
  setSectionsSelected(twoDSectionInfo []) required broadcast ram;
  setTreasureGrabbed(uint32, uint8, uint8) broadcast;
  setEnemyShot(uint32, uint8, uint8, uint32) broadcast;
  addVictoryScore(uint32, uint8) broadcast;
  setEveryoneDone() broadcast;
};

dclass DistributedDirectory : DistributedObject {
  setParentingRules(string, string) broadcast ram;
};

dclass DistributedChatManager : DistributedObject {
  online();
  adminChat(uint32, string);
  setAvatarLocation(uint32, uint32, uint32);
  setAvatarCrew(uint32, uint32);
  setAvatarGuild(uint32, uint32);
  chatParentId(uint32) airecv clsend;
  chatZoneId(uint32) airecv clsend;
  chatFace(uint32) airecv clsend;
  chatEmote(uint16) airecv clsend;
  chatEmoteTarget(uint32) airecv clsend;
  chatIndex(uint16) airecv clsend;
  chatString(string(0-256)) airecv clsend;
  chatToAvatarIndex : chatZoneId, chatIndex;
  chatParentZoneFaceEmoteWithTargetIndex : chatParentId, chatZoneId, chatFace, chatEmote, chatEmoteTarget, chatIndex;
  chatToAvatarString : chatZoneId, chatString;
  chatParentZoneFaceEmoteWithTargetString : chatParentId, chatZoneId, chatFace, chatEmote, chatEmoteTarget, chatString;
  speedChatTo(uint16) airecv clsend;
  speedChatFrom(uint32, uint16);
  speedChatCustomTo(uint16) airecv clsend;
  speedChatCustomFrom(uint32, uint16);
  whisperSCTo(uint32, uint16) airecv clsend;
  whisperSCFrom(uint32, uint16);
  whisperSCCustomTo(uint32, uint16) airecv clsend;
  whisperSCCustomFrom(uint32, uint16);
  whisperSCEmoteTo(uint32, uint16) airecv clsend;
  whisperSCEmoteFrom(uint32, uint16);
  whisperIgnored(uint32);
};

dclass NewMagicWordManager : DistributedObject {
  setMagicWord(string, uint32) airecv clsend;
}

dclass DistributedSuitPlanner : DistributedObject {
  setZoneId(uint32) required broadcast ram;
  suitListQuery() airecv clsend;
  suitListResponse(uint8array);
  buildingListQuery() airecv clsend;
  buildingListResponse(uint8array);
};